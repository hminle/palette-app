# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QFileDialog, QMainWindow, QLabel, QScrollArea
from PyQt5.QtGui import QImage
from skimage import io, util, transform
import numpy as np
from utils import limit_scale
from PIL import Image, ImageQt

import matplotlib
matplotlib.use('Qt5Agg')
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

from palette.io_util.image import loadRGB
from palette.core.hist_3d import Hist3D
from palette.core.palette_selection import PaletteSelection

class MplCanvas(FigureCanvas):

    def __init__(self, parent=None, width=5, height=4, dpi=100):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)
        super(MplCanvas, self).__init__(fig)

class ImageLabel(QLabel):
    def __init__(self, parent=None, flags=Qt.WindowFlags()):
        super(ImageLabel, self).__init__(parent, flags)
        self.bind_image = None

    def setImage(self, image):
        self.bind_image = ImageQt.ImageQt(image)
        self.setPixmap(QtGui.QPixmap.fromImage(self.bind_image))

class PaletteLabel(ImageLabel):
    def __init__(self, parent=None, flags=Qt.WindowFlags()):
        super(PaletteLabel, self).__init__(parent, flags)
        self.palette_index = -1
        self.bind_color = None

    def setColor(self, color, size=50):
        self.bind_color = color
        if color.dtype == np.float or color.dtype == np.float32 or color.dtype == np.float64:
            palette = np.zeros((size, size, 3), dtype=np.float)
            palette[:,:,0:3] = color
            palette = palette*255
            palette = palette.astype(np.uint8)
        else:
            palette = np.zeros((size, size, 3), dtype=np.uint8)
            palette[:,:,0:3] = color
        paletteImage = Image.fromarray(palette, 'RGB')
        self.setImage(paletteImage)
        self.repaint()

class MainWindow(QMainWindow):
    def __init__(self, ctx):
        super(MainWindow, self).__init__()

        self.ctx = ctx 
        self.palette_num = 5
        self.setupUi()

    def setupUi(self):
        print("Setup UI")
        self.setObjectName("MainWindow")
        self.resize(826, 597)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.imageLabel = ImageLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.imageLabel.sizePolicy().hasHeightForWidth())
        self.imageLabel.setSizePolicy(sizePolicy)
        self.imageLabel.setText("")
        self.imageLabel.setObjectName("imageLabel")
        self.horizontalLayout.addWidget(self.imageLabel)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setContentsMargins(0, -1, -1, -1)
        self.verticalLayout.setObjectName("verticalLayout")
        
        # self.globalColorPalette = QtWidgets.QLabel(self.centralwidget)
        # self.globalColorPalette.setEnabled(True)
        # sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Ignored)
        # sizePolicy.setHorizontalStretch(0)
        # sizePolicy.setVerticalStretch(1)
        # sizePolicy.setHeightForWidth(self.globalColorPalette.sizePolicy().hasHeightForWidth())
        # self.globalColorPalette.setSizePolicy(sizePolicy)
        # self.globalColorPalette.setMaximumSize(QtCore.QSize(16777215, 16777215))
        # self.globalColorPalette.setText("")
        # self.globalColorPalette.setObjectName("globalColorPalette")

        self.globalPalettes = []
        for i in range(self.palette_num):
            self.globalPalettes.append(PaletteLabel())
            self.globalPalettes[-1].setAlignment(Qt.AlignCenter)
            self.globalPalettes[-1].palette_index = i
            #self.globalPalettes[-1].setColor(np.array((0, 0, 0)).astype(np.float32))
        self.globalPalettesLayout = QtWidgets.QHBoxLayout()
        for label in self.globalPalettes:
            self.globalPalettesLayout.addWidget(label)

        # self.verticalLayout.addWitget(self.globalColorPalette)
        self.verticalLayout.addLayout(self.globalPalettesLayout)

        self.localColorPalettes = QtWidgets.QWidget(self.centralwidget) #Fix here
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(3)
        sizePolicy.setHeightForWidth(self.localColorPalettes.sizePolicy().hasHeightForWidth())
        self.localColorPalettes.setSizePolicy(sizePolicy)
        # self.localColorPalettes.setText("")
        self.localColorPalettes.setObjectName("localColorPalettes")
        # self.verticalLayout.addWidget(self.localColorPalettes)


        self.horizontalLayout.addLayout(self.verticalLayout)
        self.gridLayout_2.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.overlapSizeNumLabel = QtWidgets.QLabel(self.centralwidget)
        self.overlapSizeNumLabel.setObjectName("overlapSizeNumLabel")
        self.gridLayout.addWidget(self.overlapSizeNumLabel, 2, 3, 1, 1)
        self.saveButton = QtWidgets.QPushButton(self.centralwidget)
        self.saveButton.setObjectName("saveButton")
        self.gridLayout.addWidget(self.saveButton, 0, 2, 1, 1)
        self.numPaletteSlider = QtWidgets.QSlider(self.centralwidget)
        self.numPaletteSlider.setMinimum(0)
        self.numPaletteSlider.setMaximum(30)
        self.numPaletteSlider.setSingleStep(2)
        self.numPaletteSlider.setOrientation(QtCore.Qt.Horizontal)
        self.numPaletteSlider.setObjectName("numPaletteSlider")
        self.gridLayout.addWidget(self.numPaletteSlider, 1, 1, 1, 2)
        self.openButton = QtWidgets.QPushButton(self.centralwidget)
        self.openButton.setObjectName("openButton")
        self.gridLayout.addWidget(self.openButton, 0, 0, 1, 2)
        spacerItem = QtWidgets.QSpacerItem(588, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 0, 3, 1, 1)
        self.paletteNumLabel = QtWidgets.QLabel(self.centralwidget)
        self.paletteNumLabel.setObjectName("paletteNumLabel")
        self.gridLayout.addWidget(self.paletteNumLabel, 1, 3, 1, 1)
        self.numPaletteLabel = QtWidgets.QLabel(self.centralwidget)
        self.numPaletteLabel.setObjectName("numPaletteLabel")
        self.gridLayout.addWidget(self.numPaletteLabel, 1, 0, 1, 1)
        self.overlapSizeLabel = QtWidgets.QLabel(self.centralwidget)
        self.overlapSizeLabel.setObjectName("overlapSizeLabel")
        self.gridLayout.addWidget(self.overlapSizeLabel, 2, 0, 1, 1)
        self.overlapSizeSlider = QtWidgets.QSlider(self.centralwidget)
        self.overlapSizeSlider.setMinimum(0)
        self.overlapSizeSlider.setMaximum(1000)
        self.overlapSizeSlider.setSingleStep(100)
        self.overlapSizeSlider.setOrientation(QtCore.Qt.Horizontal)
        self.overlapSizeSlider.setObjectName("overlapSizeSlider")
        self.gridLayout.addWidget(self.overlapSizeSlider, 2, 1, 1, 2)
        self.gridLayout_2.addLayout(self.gridLayout, 1, 0, 1, 1)
        self.gridLayout_3.addLayout(self.gridLayout_2, 0, 0, 1, 1)
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 826, 21))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

        # Add code
        self.openButton.clicked.connect(self.loadImage)
        self.saveButton.clicked.connect(self.saveImage)
        self.imageLabelWidth = 800
        self.imageLabelHeight = 600
        self.filename = None
        self.tmp_img = None # For saving image

        self.localPalettesLayout = QtWidgets.QVBoxLayout()
        self.localPalettesLayout.setObjectName("localPalettesLayout")
        # self.verticalLayout.addLayout(self.localPalettesLayout)
        self.localPalettes = []

        self.localColorPalettes.setLayout(self.localPalettesLayout)
        self.scroll = QScrollArea()
        self.scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scroll.setWidgetResizable(True)
        self.scroll.setWidget(self.localColorPalettes)

        self.verticalLayout.addWidget(self.scroll)
        self.verticalLayout.


    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.overlapSizeNumLabel.setText(_translate("MainWindow", "0"))
        self.saveButton.setText(_translate("MainWindow", "Save"))
        self.openButton.setText(_translate("MainWindow", "Open"))
        self.paletteNumLabel.setText(_translate("MainWindow", "0"))
        self.numPaletteLabel.setText(_translate("MainWindow", "Num Palettes"))
        self.overlapSizeLabel.setText(_translate("MainWindow", "Overlap Size"))

    def loadImage(self):
        print("Load image")
        filename = QFileDialog.getOpenFileName()[0]
        print(filename)
        self.input_img = Image.open(filename)
        self.input_img_np = np.array(self.input_img)
        self.setPhoto()
        ## TODO: Test local
        self.setAllLocalColorPalettes()

    def setPhoto(self):
        self.imageLabel.setImage(limit_scale(self.input_img, self.imageLabelWidth, self.imageLabelHeight))
        self.calculateGlobalPalettes()

    def calculateGlobalPalettes(self):
        hist3D = Hist3D(self.input_img_np, num_bins=16, color_space='Lab')
        color_coordinates = hist3D.colorCoordinates()
        color_densities = hist3D.colorDensities()
        rgb_colors = hist3D.rgbColors()
        palette_selection = PaletteSelection(color_coordinates,
                                            color_densities, rgb_colors,
                                            num_colors=self.palette_num, sigma=70.0)
        self.globalColorPalettes = palette_selection.paletteColors()
        self.setGlobalColorPalettes()

    def setGlobalColorPalettes(self):
        for i in range(self.palette_num):
            self.globalPalettes[i].setColor(self.globalColorPalettes[i])

    def setSingleLocalColorPalettes(self):
        singleLocalColorPalettes = self.__generateLocalColorPalettes()
        hLayout = QtWidgets.QHBoxLayout()
        for color in singleLocalColorPalettes:
            paletteLabel = PaletteLabel()
            paletteLabel.setAlignment(Qt.AlignCenter)
            paletteLabel.setColor(color, size=30)
            self.localPalettes.append(paletteLabel)
            hLayout.addWidget(paletteLabel)
        self.localPalettesLayout.addLayout(hLayout)
    
    def setAllLocalColorPalettes(self):
        print('set all local palettes')
        for i in range(20):
            self.setSingleLocalColorPalettes()

    def __generateLocalColorPalettes(self):
        color = np.array((0.37091509, 0.26633987, 0.05326797)).astype(np.float32)
        return [color, color, color, color, color]

    def saveImage(self):
        print("Save image")


    def clearLayout(self, layout):
        if layout is not None:
            while layout.count():
                item = layout.takeAt(0)
                widget = item.widget()
                if widget is not None:
                    widget.deleteLater()
                else:
                    self.clearLayout(item.layout())
