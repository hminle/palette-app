# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import math
import numpy as np
from fbs_runtime.application_context.PyQt5 import ApplicationContext
from typing import List, Optional
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QFileDialog, QMainWindow, QLabel, QScrollArea, QPushButton
from PyQt5.QtGui import QImage
from skimage import io, util, transform
import numpy as np
from utils import limit_scale
from PIL import Image, ImageQt
from gui.image_label import ImageLabel
from gui.palette_label import PaletteLabel
from gui.palette_controller import PaletteController
from gui.image_model import ImageModel

import matplotlib
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
matplotlib.use('Qt5Agg')
from matplotlib.backends.backend_qt5agg import (FigureCanvasQTAgg as FigureCanvas, 
                                                NavigationToolbar2QT as NavigationToolbar)           
from matplotlib.figure import Figure

GLOBAL_COLOR_PALETTE_SIZE = 30

class MplCanvas(FigureCanvas):

    def __init__(self, parent=None, width=5, height=4, dpi=100):
        plt.ion()
        self.fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = self.fig.add_subplot(111, projection='3d')
        # self.axes = Axes3D(self.fig)
        super(MplCanvas, self).__init__(self.fig)

class PushButton(QPushButton):

    def __init__(self, pos, parent=None):
        super(PushButton, self).__init__()
        self.pos = pos

class MainWindow(QMainWindow):

    def __init__(self, ctx):
        super(MainWindow, self).__init__()

        self.ctx: ApplicationContext = ctx 
        self.palette_num: int = 5
        self.window_size: int = 5
        self.overlap_size: int = 0
        self.overlap_size_interval: int = 5
        self.setupUi()

    def setupUi(self) -> None:
        print("Setup UI")
        self.setObjectName("MainWindow")
        self.resize(1100, 700)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.centralGridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.centralGridLayout.setObjectName("centralGridLayout")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")

        # Left Vertical Layout
        self.leftVerticalLayout = QtWidgets.QVBoxLayout()
        self.leftVerticalLayout.setObjectName("leftVerticalLayout")

        self.leftImageLabel = ImageLabel(self.centralwidget)
        leftSizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        leftSizePolicy.setHorizontalStretch(0)
        leftSizePolicy.setVerticalStretch(2)
        leftSizePolicy.setHeightForWidth(self.leftImageLabel.sizePolicy().hasHeightForWidth())
        self.leftImageLabel.setSizePolicy(leftSizePolicy)
        self.leftImageLabel.setText("")
        self.leftImageLabel.setObjectName("leftImageLabel")

        # Global Palettes of Relectance
        self.globalPalettes: List[PaletteLabel] = []
        for i in range(self.palette_num):
            self.globalPalettes.append(PaletteLabel(self, palette_index=i))
            self.globalPalettes[-1].setAlignment(Qt.AlignCenter)
        self.globalPalettesLayout = QtWidgets.QHBoxLayout()
        for label in self.globalPalettes:
            self.globalPalettesLayout.addWidget(label)

        # Leftt Bottom Grid Layout
        self.leftBottomGridLayout = QtWidgets.QGridLayout()
        self.leftBottomGridLayout.setObjectName("bottomGridLayout")

        self.leftOpenButton = PushButton('left')
        self.leftOpenButton.setObjectName("leftOpenButton")
        self.leftBottomGridLayout.addWidget(self.leftOpenButton, 0, 0, 1, 1)

        # self.resetButton = QtWidgets.QPushButton(self.centralwidget)
        # self.resetButton.setObjectName("resetButton")
        # self.leftBottomGridLayout.addWidget(self.resetButton, 0, 1, 1, 1)

        leftSpacerItem = QtWidgets.QSpacerItem(388, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.leftBottomGridLayout.addItem(leftSpacerItem, 0, 2, 1, 1)
       
        self.leftVerticalLayout.addWidget(self.leftImageLabel)
        self.leftVerticalLayout.addLayout(self.globalPalettesLayout)
        self.leftVerticalLayout.addLayout(self.leftBottomGridLayout)

        self.horizontalLayout.addLayout(self.leftVerticalLayout)

        # middle Vertical Layout
        self.middleVerticalLayout = QtWidgets.QVBoxLayout()
        self.middleVerticalLayout.setObjectName("middleVerticalLayout")
        self.middleImageLabel = ImageLabel(self.centralwidget)
        middleSizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        middleSizePolicy.setHorizontalStretch(0)
        middleSizePolicy.setVerticalStretch(0)
        middleSizePolicy.setHeightForWidth(self.middleImageLabel.sizePolicy().hasHeightForWidth())
        self.middleImageLabel.setSizePolicy(middleSizePolicy)
        self.middleImageLabel.setText("")
        self.middleImageLabel.setObjectName("middleImageLabel")

        # middlet Bottom Grid Layout
        self.middleBottomGridLayout = QtWidgets.QGridLayout()
        self.middleBottomGridLayout.setObjectName("bottomGridLayout")

        self.middleOpenButton = PushButton('middle')
        self.middleOpenButton.setObjectName("middleOpenButton")
        self.middleBottomGridLayout.addWidget(self.middleOpenButton, 0, 0, 1, 1)

        # self.resetButton = QtWidgets.QPushButton(self.centralwidget)
        # self.resetButton.setObjectName("resetButton")
        # self.middleBottomGridLayout.addWidget(self.resetButton, 0, 1, 1, 1)

        middleSpacerItem = QtWidgets.QSpacerItem(388, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.middleBottomGridLayout.addItem(middleSpacerItem, 0, 2, 1, 1)
        
        self.middleVerticalLayout.addWidget(self.middleImageLabel)
        self.middleVerticalLayout.addLayout(self.middleBottomGridLayout)

        self.horizontalLayout.addLayout(self.middleVerticalLayout)

        # Right Vertical Layout
        self.rightVerticalLayout = QtWidgets.QVBoxLayout()
        self.rightVerticalLayout.setObjectName("rightVerticalLayout")
        self.rightImageLabel = ImageLabel(self.centralwidget)
        rightSizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        rightSizePolicy.setHorizontalStretch(0)
        rightSizePolicy.setVerticalStretch(0)
        rightSizePolicy.setHeightForWidth(self.rightImageLabel.sizePolicy().hasHeightForWidth())
        self.rightImageLabel.setSizePolicy(rightSizePolicy)
        self.rightImageLabel.setText("")
        self.rightImageLabel.setObjectName("rightImageLabel")

        # rightt Bottom Grid Layout
        self.rightBottomGridLayout = QtWidgets.QGridLayout()
        self.rightBottomGridLayout.setObjectName("bottomGridLayout")

        self.rightOpenButton = PushButton('right')
        self.rightOpenButton.setObjectName("rightOpenButton")
        self.rightBottomGridLayout.addWidget(self.rightOpenButton, 0, 0, 1, 1)

        # self.resetButton = QtWidgets.QPushButton(self.centralwidget)
        # self.resetButton.setObjectName("resetButton")
        # self.rightBottomGridLayout.addWidget(self.resetButton, 0, 1, 1, 1)

        rightSpacerItem = QtWidgets.QSpacerItem(388, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.rightBottomGridLayout.addItem(rightSpacerItem, 0, 2, 1, 1)

        self.rightVerticalLayout.addWidget(self.rightImageLabel)
        self.rightVerticalLayout.addLayout(self.rightBottomGridLayout)

        self.horizontalLayout.addLayout(self.rightVerticalLayout)

        # End Horizontal Layout
        self.gridLayout_2.addLayout(self.horizontalLayout, 0, 0, 1, 1)

        self.centralGridLayout.addLayout(self.gridLayout_2, 0, 0, 1, 1)
        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 826, 21))
        self.menubar.setObjectName("menubar")
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

        # Add code
        self.leftOpenButton.clicked.connect(self.handleOpenButtonClicked)
        self.middleOpenButton.clicked.connect(self.handleOpenButtonClicked)
        self.rightOpenButton.clicked.connect(self.handleOpenButtonClicked)
        # self.resetButton.clicked.connect(self.handleResetButtonClicked)

        self.imageLabelWidth: int = 400
        self.imageLabelHeight: int = 400
        # self.left_image_model = ImageModel()
        # self.middle_image_model = ImageModel()
        self.right_image_model = ImageModel()

        self.left_palette_controller = None
        self.middle_palette_controller = None



    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "Intrinsic App"))
        self.leftOpenButton.setText(_translate("MainWindow", "Open"))
        self.middleOpenButton.setText(_translate("MainWindow", "Open"))
        self.rightOpenButton.setText(_translate("MainWindow", "Open"))

    def handleOpenButtonClicked(self):
        button_sender = self.sender()
        button_pos = button_sender.pos

        input_path = QFileDialog.getOpenFileName()[0]
        print(input_path)

        if button_pos == 'left':
            if self.left_palette_controller is None:
                self.left_palette_controller = PaletteController(self)
            self.left_palette_controller.load_image(input_path)
            global_palette_Lab = self.left_palette_controller.generate_global_palettes()
            self.__setGlobalPalettes(global_palette_Lab)

            input_image = self.left_palette_controller.get_image()
            self.setPhoto(self.leftImageLabel, input_image)
            # self.clear_plot(self.leftMatplotlibCanvas)
            # self.plot(self.leftMatplotlibCanvas, color_samples_RGB)
        elif button_pos == 'middle':
            if self.middle_palette_controller is None:
                self.middle_palette_controller = PaletteController(self)
            self.middle_palette_controller.load_image(input_path)
            s_image = self.middle_palette_controller.get_image()
            r_image = self.left_palette_controller.get_image()
            reconstructed_image = self.reconstruct_image(r_image, s_image)
            self.setPhoto(self.middleImageLabel, reconstructed_image)

            # self.clear_plot(self.middleMatplotlibCanvas)
            # self.plot(self.middleMatplotlibCanvas, color_samples_RGB)
        else:
            input_image = self.right_image_model.load_image(input_path)
            self.setPhoto(self.rightImageLabel, input_image)
            # self.clear_plot(self.rightMatplotlibCanvas)
            # self.plot(self.rightMatplotlibCanvas, color_samples_RGB)

    def handlePaletteLabelClicked(self, chosen_color_Lab, is_global, palette_index):
        if is_global:
            self.globalPalettes[palette_index].setColor(chosen_color_Lab, 
                                                        size=GLOBAL_COLOR_PALETTE_SIZE)
            self.left_palette_controller.handleGlobalPaletteChanged(chosen_color_Lab, palette_index)     
            image = self.left_palette_controller.get_image()
            self.setPhoto(self.leftImageLabel, image)

            s_image = self.middle_palette_controller.get_image()
            r_image = self.left_palette_controller.get_image()
            reconstructed_image = self.reconstruct_image(r_image, s_image)
            self.setPhoto(self.middleImageLabel, reconstructed_image)

    def __setGlobalPalettes(self, global_palette_Lab):
        for i in range(len(global_palette_Lab)):
            self.globalPalettes[i].setColor(global_palette_Lab[i], 
                                            size=GLOBAL_COLOR_PALETTE_SIZE)
    def setPhoto(self, imageLabel, image):
        print("SET NEW IMAGE")
        imageLabel.setImage(limit_scale(image, self.imageLabelWidth, self.imageLabelHeight)) 

    def clearLayout(self, layout):
        if layout is not None:
            while layout.count():
                item = layout.takeAt(0)
                widget = item.widget()
                if widget is not None:
                    widget.deleteLater()
                else:
                    self.clearLayout(item.layout())

    def plot(self, canvas, color_samples_RGB):
        # color_samples_RGB = self.palette_controller.image_model.color_samples_RGB
        canvas.axes.scatter(color_samples_RGB[:, 0], 
                                           color_samples_RGB[:, 1], 
                                           color_samples_RGB[:, 2],
                                           c=np.reshape(color_samples_RGB, (-1, 3)))
        canvas.draw()

    def clear_plot(self, canvas):
        print('Clear Plot')
        canvas.axes.cla()
        canvas.draw()

    def reconstruct_image(self, r_image, s_image):
        s_image = s_image.convert('L')
        r_image = r_image.convert('RGB')

        s_img_np = np.array(s_image)
        r_img_np = np.array(r_image)

        s_img_np = np.expand_dims(s_img_np, axis=2)
        s_img_np = np.concatenate((s_img_np, s_img_np, s_img_np), axis=2)
        s_img_nor = s_img_np / 255
        s_img_nor = s_img_nor**(1/2.2)
        r_img_nor = r_img_np/255
        reconstructed_img = np.multiply(r_img_nor, s_img_nor)
        reconstructed_img = (reconstructed_img*255).astype(np.uint8)
        return Image.fromarray(reconstructed_img)